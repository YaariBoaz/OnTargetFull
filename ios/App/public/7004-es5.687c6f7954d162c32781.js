!function(){function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function t(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function n(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var r,n=u(e);if(t){var c=u(this).constructor;r=Reflect.construct(n,arguments,c)}else r=n.apply(this,arguments);return o(this,r)}}function o(e,t){if(t&&("object"==typeof t||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}(self.webpackChunkonTarget=self.webpackChunkonTarget||[]).push([[7004],{37004:function(o,u,c){"use strict";c.r(u),c.d(u,{AppTrackingTransparencyWeb:function(){return i}});var i=function(o){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&r(e,t)}(a,o);var u,c,i,f=n(a);function a(){return e(this,a),f.apply(this,arguments)}return u=a,(c=[{key:"getStatus",value:function(){return Promise.resolve({status:"authorized"})}},{key:"requestPermission",value:function(){return Promise.resolve({status:"authorized"})}}])&&t(u.prototype,c),i&&t(u,i),Object.defineProperty(u,"prototype",{writable:!1}),a}(c(15310).Uw)}}])}();